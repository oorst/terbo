/**
Items can be hirarchical so they should be flattened first.

The strategy here is to select the data for all the boq_lines that will be
inserted for provided boqs as well as boq from task attribute maps then union
them altogether and insert the lines last.
*/

CREATE OR REPLACE FUNCTION scm.create_item (json, OUT result json) AS
$$
BEGIN
  -- Flatten the item and sub items into a set of items
  WITH item AS (
    SELECT
      i.uuid AS item_uuid,
      i.parent_uuid,
      i.code,
      i.id,
      i.data,
      i.boq,
      i.attributes,
      pr.product_id
    FROM scm.flatten_item($1) i
    INNER JOIN prd.product pr
      USING (code)
  ),
  -- Insert new items
  new_item AS (
    INSERT INTO scm.item (
      item_uuid,
      parent_uuid,
      product_id,
      id,
      data
    ) (
      SELECT
        item_uuid,
        parent_uuid,
        product_id,
        id,
        data
      FROM item
    ) RETURNING *
  ),
  -- Collect tasks and join item.item_id, item.uuid and route_id
  task AS (
    SELECT
      item.item_id,
      item.uuid,
      route.route_id,
      t.*
    FROM new_item item
    INNER JOIN scm.product_route route
      USING (product_id)
    INNER JOIN scm.route_task
      USING (route_id)
    INNER JOIN scm.task t
      USING (task_id)
  ),
  -- Insert task instances and BoQs where an item has a boq or attributes
  task_instance AS (
    INSERT INTO scm.task_instance (
      task_id,
      item_id,
      boq_id
    ) (
      SELECT
        task.task_id,
        task.item_id,
        (
          INSERT INTO scm.boq DEFAULT VALUES RETURNING boq_id
        )
      FROM task
      INNER JOIN item
        USING (item_id)
      WHERE item.boq IS NOT NULL OR item.attributes IS NOT NULL
    ) RETURNING *
  ),
  -- Select boq line data from items that have provided a boq
  item_boq_line AS (
    SELECT
      ti.boq_id,
      pr.product_id,
      quantity
    FROM task_instance ti
    -- Need the item for it's boq and product_id
    INNER JOIN item
      USING (item_id)
    -- Need route_task for seq_num
    INNER JOIN scm.route_task rt
      USING (product_id)
    INNER JOIN json_each(item.boq) item_boq
      ON rt.seq_num = (item_boq.key)::text::integer
    CROSS JOIN json_to_recordset(item_boq.value) AS
      boq(code text, quantity numeric(10,2))
    INNER JOIN prd.product pr
      USING (code)
    WHERE item.boq IS NOT NULL
  ),
  -- Select boq line data from items that have provided attributes
  item_attr_boq_line AS (
    SELECT
      ti.boq_id,
      pr.product_id,
      (attr.value)::numeric(10,2)
    FROM task_instance ti
    INNER JOIN scm.task_inst_boq_attr_map map
      USING (task_id)
    INNER JOIN item
      USING (item_id)
    INNER JOIN json_each_text(item.attributes) attr
      ON map.attribute = attr.key
  )
END
$$
LANGUAGE 'plpgsql' SECURITY DEFINER;
